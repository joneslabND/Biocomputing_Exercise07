x[1:3]
#4.	Return elements 3 and 4 of x.
x[1:4]
source("~/Documents/Stats/Lab 0 Intro to R Studio.R")
#4.	Return elements 3 and 4 of x.
x[3:4]
#4.	Return elements 3 and 4 of x.
x[1:4]
#4.	Return elements 3 and 4 of x.
x[3:4]
#4.	Return elements 3 and 4 of x.
x[3:4]
#4.	Return elements 3 and 4 of x.
x[3:4]
#4.	Return elements 3 and 4 of x.
x[3:4]
#4.	Return elements 3 and 4 of x.
x[3:4]
source("~/Documents/Stats/Lab 0 Intro to R Studio.R")
#4.	Return elements 3 and 4 of x.
x[3:4]
#4.	Return elements 3 and 4 of x.
x[3:4]
#4.	Return elements 3 and 4 of x.
x[3:4]
baseball$Team
source("~/Documents/Stats/Lab 0 Intro to R Studio.R")
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
#Check that you have the appropriate working directory. (getwd())
getwd()
#Check that you have the appropriate working directory. (getwd())
getwd()
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
#Check that you have the appropriate working directory. (getwd())
getwd()
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
source("~/Documents/Stats/Lab 0 Intro to R Studio.R")
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
#7.	Look at the first four variables for the New York Yankees (NYY).
baseball[baseball$Team=="NYY",1:4]
#Check that you have the appropriate working directory. (getwd())
getwd()
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
?View
#Check that you have the appropriate working directory. (getwd())
getwd()
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
#4.	Return elements 3 and 4 of x.
x[3:4]
#Check that you have the appropriate working directory. (getwd())
getwd()
source("~/Downloads/Lab 0 Intro to R Studio.R")
#Check that you have the appropriate working directory. (getwd())
getwd()
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
#Check that you have the appropriate working directory. (getwd())
getwd()
#4.	Return elements 3 and 4 of x.
x[3:4]
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
#Check that you have the appropriate working directory. (getwd())
getwd()
#Use the read.table() function to read in the data.  Call the dataset baseball and include headers.
baseball <- read.table("baseball2011.txt",header=T)
1-pnorm(105, 100, 16)
pnorm(105, 100, 16)
pnorm(105, 100, 16/sqrt(64))
install.packages("glmbb")
library(glmbb)
library(glmbb)
data(crabs)
data(crabs)
View(crabs)
?hist
hist()
hist(crabs)
hist(crabs)
hist(data)
hist(width)
hist(width)
data(crabs)
data(crabs)
hist(crabs$width)
library(glmbb)
data(crabs)
hist(crabs$width)
library(glmbb)
data(crabs)
hist(crabs$width)
?hist
hist(crabs$width,
main = paste("Histogram of Carapace Widths"),
xlab = "Widths (cm)")
hist(crabs$width, breaks = 20
main = paste("Histogram of Carapace Widths"),
hist(crabs$width, breaks = 20,
main = paste("Histogram of Carapace Widths"),
xlab = "Widths (cm)")
etectors <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2023/2023-07-18/detectors.csv')
qt(0.995,71)
qt(0.975, 5)
?t.test()
t.test(x, mu = 15, "greater")
t.test(x, alternative = "greater", mu =15)
t.test(x, alternative = "less", mu =15)
tam <- [21,21, 25, 23, 20]
tam <- c[21, 21, 25, 23, 20]
tam <- c([21, 21, 25, 23, 20])
tam <- c(21, 21, 25, 23, 20)
sd(tam)
t.test(x, alternative = "less", mu =15)
qnorm(0.1, 0, 1)
t.test(x, alternative = "greater", mu =15)
t.test(x, mu =15)
t.test(x, mu =15)
tam <- c(21, 21, 25, 23, 20)
t.test(x, mu =15)
qnorm(1-0.1, 0, 1)
qnorm(1-0.1, 22, 2)
qnorm(0.1, 22, 2)
sd(tam)
t.test(x, mu =22)
t.test(x, mu = 15)
t.test(x, mu = 15, mu = 22)
t.test(mu = 22), mu = 15)
t.test(mu = 22, mu = 15)
t.test (x, alternative = "greater", mu = 15)
t.test (x, alternative = "greater", mu = 22)
x <- c(21, 21, 25, 23, 20)
x <- c(21, 21, 25, 23, 20)
sd(tam)
qnorm(0.1, 22, 2)
t.test(x, alternative = "two-tailed", mu = 15)
t.test(x, alternative = "two.sided", mu = 15)
x <- c(15, 21, 16, 23, 20)
sd(tam)
qnorm(0.1, 22, 2)
t.test(x, alternative = "two.sided", mu = 15)
mean(x)
qnorm(0.1, 0, 1)
qt(.1, 4)
qnorm(0.01, 0, 1)
x <- c(15, 21, 16, 23, 20)
qt(.01, 4)
qnorm(0.01, 22, 2)
qnorm(0.01, 15, 2)
qt(.01/2, 4)
pnorm(105, 100, 16/sqrt(64))
qnorm(.995, 1.13, 2.21)
?qt
?qnorm
qnorm(.995, 1.13, 2.21/sqrt(72))
1-qnorm(.995, 1.13, 2.21/sqrt(72))
qnorm(.995, 0, 1)
qt(0.975, 5)
qt(0.975, 5)
qt(0.975, 5)
qt(.01/2, 5)
qt(.01/2, 4)
1-pnorm(2.808, 0, 1)
regular <- c(21, 13, 10, 20, 25, 19, 16, 21, 24, 13, 14)
bilimeic <- c(13, 6, 16, 13, 8, 19, 23, 18, 11, 19, 7, 10, 15, 20)
mean(regular)
mean(bilimeic)
regular <- c(21, 13, 10, 20, 25, 19, 16, 21, 24, 13, 14)
bilimeic <- c(13, 6, 16, 13, 8, 19, 23, 18, 11, 19, 7, 10, 15, 20)
mean(regular)
mean(bilimeic)
var(regular)
var(bilimeic)
t.test(bilimeic, regular)
?t.test
t.test(bilimeic, regular, conf.level = .90)
t.test(regular, bilimeic, conf.level = .90)
t.test(bilimeic, regular, conf.level = .90)
qnorm(.1/2, 23)
t.test(new, old, alternative = "two.tail")
t.test(new, old, alternative = "two.sided")
t.test(new, old)
old <- c(9.98, 10.1,	9.84,	10.26,	10.05,	10.15,	10.05,	9.8, 10.02,	10.29,
10.15,	9.8,	10.03,	10,	9.73,	8.05,	9.87,	10.01,	10.55,	9.55,	9.98,	10.26,
9.95,	8.72,	9.97,	9.7,	8.8,	9.87,	8.72,	9.84)
new <- c(9.19,	10.01,	8.82,	9.63,	8.82,	8.65,	10.1,	9.43,	8.51,	9.7,	10.03,
9.14,	10.09,	9.85,	9.75,	9.6,	9.27,	8.78,	10.05,	8.83,	9.35,
10.12,	9.39,	9.54,	9.49,	9.48,	9.36,	9.37,	9.64,	8.68)
t.test(new, old, alternative = "two.sided")
t.test(new, old, alternative = "two.sided", conf.level = .90)
t.test(new, old, alternative = "two.sided", conf.level = .95)
t.test(old, new, alternative = "two.sided", conf.level = .95)
tuition_cost <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/tuition_cost.csv')
tuition_income <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/tuition_income.csv')
salary_potential <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/salary_potential.csv')
salary_potential <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/salary_potential.csv')
tuition_income <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/tuition_income.csv')
historical_tuition <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/historical_tuition.csv')
View(historical_tuition)
View(salary_potential)
tuition_cost <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-03-10/tuition_cost.csv')
View(tuition_cost)
View(tuition_income)
View(historical_tuition)
View(salary_potential)
View(tuition_income)
tuesdata <- tidytuesdayR::tt_load('2020-03-10')
tuesdata <- tidytuesdayR::tt_load(2020, week = 11)
tuition_cost <- tuesdata$tuition_cost
View(tuesdata)
library(tidyverse)
View(tuition_income)
View(tuition_income)
View(salary_potential)
View(historical_tuition)
View(historical_tuition)
View(salary_potential)
View(tuition_income)
View(salary_potential)
View(tuition_income)
View(tuition_cost)
View(tuition_income)
View(salary_potential)
setwd("/Users/izabellalopez/Junior_yr/Biocomputing/Biocomputing_Exercise07")
input_file <- "iris.csv"
# Read the CSV file with comma delimiter
data <- read.csv(input_file, sep = ",")
# Write the data to a tab-delimited text file
write.table(data, output_file, sep = "\t", quote = FALSE, row.names = FALSE)
output_file <- "iris.txt"
# Write the data to a tab-delimited text file
write.table(data, output_file, sep = "\t", quote = FALSE, row.names = FALSE)
# Write the data to a tab-delimited text file
write.table(data, output_file, sep = "\t", quote = FALSE, row.names = FALSE,
col.names = TRUE)
input_file <- "iris.csv"
output_file <- "iris.txt"
# Read the CSV file with comma delimiter
data <- read.csv(input_file, sep = ",")
# Write the data to a tab-delimited text file
write.table(data, output_file, sep = "\t", quote = FALSE, row.names = FALSE,
col.names = TRUE)
# Write the data to a tab-delimited text file
write.table(data, output_file, sep = "\t", quote = FALSE, row.names = FALSE,
col.names = TRUE)
# Write the data to a tab-delimited text file
write.table(data, output_file, sep = "\t", col.names = TRUE)
writeLines(paste(col_names, collapse = "\t"), output_file, sep = "\n", append = TRUE)
input_file <- "iris.csv"
output_file <- "iris.txt"
# Read the CSV file with comma delimiter
data <- read.csv(input_file, sep = ",")
# Write the data to a tab-delimited text file with custom formatting
write.table(data, output_file, sep = "\t", col.names = TRUE)
# Write the data to a tab-delimited text file with custom formatting
write.table(data, file="iris.csv",sep=",",col.names=TRUE)
cat(v1, file = "iris.txt")
# Write the data to a tab-delimited text file with custom formatting
table <- write.table(data, file="iris.csv",sep=",",col.names=TRUE)
cat(table, file = "iris.txt")
input_file <- "iris.csv"
output_file <- "iris.txt"
# Write the data to a tab-delimited text file with custom formatting
write.table(data, output_file, sep = "\t", col.names = TRUE)
View(data)
# Write the data to a tab-delimited text file
write.table(data, output_file, sep = "\t", quote = FALSE, row.names = FALSE, col.names = TRUE)
# Write the data to a tab-delimited text file
write.table(data, output_file, sep = "\t", col.names = TRUE)
# Read the CSV file with comma delimiter
iris.data <- read.csv(input_file, sep = ",")
# Write the data to a tab-delimited text file
write.table(iris.data, file = "iris.txt", sep = "\t")
my_list <- list(
element1 = seq(100, 1000, by = 100),  # A vector from 100 to 1000 in increments of 100
element2 = data.frame(
Team = c("Notre Dame", "Opponent"),
Score = c(24, 20)
),  # A 2x2 data frame with team names and scores
element3 = 999,  # The number 999
element4 = matrix(1:50, nrow = 10, ncol = 5),  # A 10x5 matrix with integers from 1 to 50
element5 = c("A", "B", "C")  # A vector containing three letters
)
# Print the list
print(my_list)
my_list <- list(
vector1 = seq(100, 1000, by = 100),  # A vector from 100 to 1000 in increments of 100
Notre_Dame.df = data.frame(
Team = c("Notre Dame", "Pittsburgh"),
Score = c(58, 7)
),  # A 2x2 data frame with team names and scores
variable_999 = 999,  # The number 999
matrix_1 = matrix(c(1:50), nrow = 10, ncol = 5),  # A 10x5 matrix with integers from 1 to 50
vector2 = c("A", "B", "C")  # A vector containing three letters
)
# Print the list
print(my_list)
